{"version":3,"file":"reactivity.esm-bundler.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts","../src/computed.ts"],"sourcesContent":["export const isObject = (obj) => typeof obj === 'object' && typeof obj !== null;\r\nexport const extend = Object.assign;\r\nexport const isArray = Array.isArray;\r\nexport const isFunction = (value) => typeof value == 'function';\r\nexport const isNumber = (value) => typeof value == 'number';\r\nexport const isString = (value) => typeof value == 'string';\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\r\n\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value; ","import { isArray, isIntegerKey } from \"@vue/shared\";\r\nimport { TriggerOrTypes } from \"./operators\";\r\n\r\nexport function effect(fn, options: any = {}) {\r\n    // 我需要让这个effect 变成响应的 efect 可以做到数据变化重新执行\r\n    const effect = createReactiveEffect(fn, options);\r\n\r\n    if (!options.lazy) { // 默认的effect 会先执行\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\n\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前的 effect\r\nconst effectStack = []; // 不能存放重复的 effect\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effectStack.includes(effect)) { // 保证effect 没有加入到effectStack中\r\n            try {\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return  fn(); // 函数执行时会取值  会执行get方法\r\n            } finally {\r\n                effectStack.pop();\r\n                activeEffect = effectStack[effectStack.length - 1]\r\n            }\r\n        }\r\n\r\n    }\r\n    effect.id = uid++; // 制作一个effect标识 用于区分effect\r\n    effect._isEffect = true; // 用于标识这个响应式effect\r\n    effect.raw = fn; // 保留effect对应的原函数\r\n    effect.options = options; // 在effect保留用户的属性\r\n    return effect;\r\n}\r\n\r\n// 让某个对象中的属性 收集当前他对应的 effect 函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n    // activeEffect; 当前正在运行的 effect\r\n    if (activeEffect === undefined) { // 此属性不用依赖收集 因为没在effect 中使用\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, depsMap = new Map);\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set))\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect)\r\n    }\r\n    // console.log(targetMap);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// activeEffect 依赖收集就是收集effect -->  属性对应  effect 要存放的数据结构\r\n// wekMap 存放对象属性 target => new Map \r\n// new Map 结构是=> key => Set\r\n\r\n\r\n\r\n// effect(()=> {\r\n//     state.age++; // 要防止这种造成死循环\r\n// })\r\n\r\n// 函数调用是一个栈结构\r\n//  effect(()=>{ // effect1\r\n//     state.name --> effect1\r\n//     effect(()=>{//effect2\r\n//         state.age --> effect2\r\n//     })\r\n//     state.address --> effect1\r\n// })\r\n\r\n\r\n\r\n// 找属性对应的effect 让其执行(这里值考虑了数组和对象)\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n    // 如果这个属性没有 收集过effect 那不需要任何操作\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) return;\r\n    const effects = new Set(); // 这里对effect 去重了\r\n    const add = (effectToAdd) => {\r\n        if (effectToAdd) {\r\n            effectToAdd.forEach(effect => effects.add(effect))\r\n        }\r\n    }\r\n    // 要将所有的 要执行的effect 全部存到一个新的集合中 最终一起执行\r\n\r\n    // 1.看修改的是不是数组的长度 因为改长度影响比较大\r\n    if (key === 'length' && isArray(target)) {\r\n        // 如果对应的长度 有依赖收集需要更新\r\n        depsMap.forEach((dep, index) => {\r\n            if (key === 'length' || key > newValue) {// 如果更改的长度小于收集的索引 那么这个索引也需要触发effect重新执行\r\n                add(dep);\r\n            }\r\n        })\r\n    } else {\r\n        // 可能是对象\r\n        if (key !== undefined) { // 这里肯定是修改 不能是新增\r\n            add(depsMap.get(key));\r\n        }\r\n        // 如果修改了数组中的 某一个索引 怎么办?\r\n        switch (type) {\r\n            case TriggerOrTypes.ADD:\r\n                if (isArray(target) && isIntegerKey(key)) {\r\n                    add(depsMap.get('length'));\r\n                }\r\n        }\r\n    }\r\n\r\n    // console.log('effects', effects);\r\n\r\n    // effects.forEach((effect: any) => effect());\r\n    effects.forEach((effect: any) => {\r\n        if(effect.options.scheduler){\r\n            effect.options.scheduler(effect);\r\n        }else {\r\n            effect();\r\n        }\r\n    });\r\n}","// 实现 new Proxy(target,handler)\r\n\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\nimport { readonly, reactive } from './reactive'\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\n\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\n\r\nexport const mutableHandlers = {\r\n    get,\r\n    set,\r\n};\r\nexport const shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n    set: shallowSet,\r\n};\r\n\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key ${key}  falied`);\r\n\r\n    }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n    get: readonlyGet\r\n}, readonlyObj);\r\nexport const shallowReadonlyHandlers = extend({\r\n    get: shallowReadonlyGet\r\n}, readonlyObj);\r\n\r\n\r\n// 是不是仅读的 仅读的属性set 时会报异常\r\n// 是不是深度的\r\nfunction createGetter(isReadonly = false, shallow = false) {  // 拦截获取功能\r\n\r\n    return function get(target, key, receiver) {\r\n        // proxy + Reflect\r\n\r\n        // 后续Object 上的方法会迁移到 Reflect \r\n        // 以前的 target[key] = value 方式设置值 可能会失败 并不会报异常 也没有返回值标识\r\n        // Reflect 方法具备返回值\r\n\r\n\r\n        const res = Reflect.get(target, key, receiver);\r\n\r\n        if (!isReadonly) {\r\n            // 收集依赖 等会数据变化后更新对应的视图\r\n            console.log('执行effect时会取值', '收集effect');\r\n            track(target, TrackOpType.GET, key)\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n\r\n        }\r\n        if (isObject(res)) {\r\n            // vue2 是一上来就递归  vue3 是当取值的时候递归 vue3的代理模式是懒递归\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res\r\n    }\r\n\r\n\r\n\r\n}\r\nfunction createSetter(isReadonly = false) { // 拦截设置功能\r\n    return function set(target, key, value, receiver) {\r\n\r\n        const oldValue = target[key]; // 获取老的值\r\n        // isArray(target) && isIntegerKey(key) 判断是数组 并且改了下标的值 \r\n        // 然后判断 修改的下标的值比 数据的长度小 那么就是修改\r\n        // 最后 判断新老值是否相等 是相等就是修改\r\n        let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\r\n\r\n        const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n        if (!hadKey) {\r\n            // 新增\r\n            trigger(target, TriggerOrTypes.ADD, key, value);\r\n            // console.log('新增');\r\n\r\n        } else if (hasChanged(oldValue, value)) {\r\n            // 修改\r\n            trigger(target, TriggerOrTypes.SET, key, value, oldValue);\r\n            // console.log('修改');\r\n\r\n        }\r\n\r\n        // 我们要区分是新增的 还是修改的 vue2 里无法监控更改索引 无法监控数组的长度的变化\r\n\r\n        // 当数据更新时  通知对应属性的effect 重新执行\r\n\r\n        return result;\r\n    }\r\n}","import { isObject } from \"@vue/shared\";\r\nimport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers } from './baseHandlers'\r\n\r\n\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers)\r\n}\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers)\r\n}\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n}\r\n\r\n\r\nconst reactiveMap = new WeakMap(); // 会自动的垃圾回收 不会造成内存泄漏 存储的key 只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n    // 如果目标不是对象,就没法拦截, reactive 这个api 只能拦截对象\r\n    if (!isObject(target)) {\r\n        return target;\r\n    }\r\n    // 如果某个对象已经被代理过了 就不要再次代理了 可能一个对象 被代理是深度  又被仅读代理了\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const existProxy = proxyMap.get(target);\r\n    if (existProxy) {\r\n        return existProxy; // 如果已经被代理了 直接返回即可\r\n    }\r\n\r\n    const proxy = new Proxy(target, baseHandlers);\r\n    proxyMap.set(target, proxy);// 将要代理的对象和对应代理的结果缓存起来 \r\n\r\n    return proxy;\r\n}","import { hasChanged, isArray, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\nimport { reactive } from \"./reactive\";\r\n\r\nexport function ref(value) {\r\n    // 将一个普通类型 变成一个对象,  可以是对象 但是一般情况下是对象直接用reactive 更合理\r\n    return createRef(value);\r\n}\r\n\r\n// ref 和 reactive 的区别  reactive内部采用proxy ref中内部使用的是 defineProperty\r\n\r\nexport function shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\n\r\n// 后续看vue的源码基本上使用的都是高阶函数 做了类似柯里化的功能;\r\n\r\nconst convert = (val) => isObject(val) ? reactive(val) : val;\r\nclass RefImpl {\r\n    public _value; // 标识声明了一个_value 属性 但是没有赋值\r\n    public __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(public rawValue, public shallow) { // 参数中前面增加修饰符 标识此属性放到了实例上\r\n        this._value = shallow ? rawValue : convert(rawValue); // 如果是深度的 需要把里面的都变成响应式的 直接使用 reactive\r\n    }\r\n    // 类的属性访问器\r\n    get value() {\r\n        // 收集依赖 收集effect \r\n        track(this, TrackOpType.GET, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(newValue, this.rawValue)) { // 判断老值和新值是否有变化\r\n            this.rawValue = newValue;\r\n            this._value = this.shallow ? newValue : convert(newValue);\r\n            trigger(this, TriggerOrTypes.SET, 'value', newValue);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow)\r\n}\r\n\r\nclass ObjectRefImpl {\r\n    public __v_isRef = true;\r\n    constructor(public target, public key) {\r\n\r\n    }\r\n    get value() {\r\n        return this.target[this.key]\r\n    }\r\n    set value(newValue) {\r\n        this.target[this.key] = newValue;\r\n    }\r\n}\r\n\r\n\r\n// 可以讲一个对象的值转化成ref 类型\r\nexport function toRef(target, key) {\r\n    return new ObjectRefImpl(target, key);\r\n}\r\n\r\n// 包装整个对象\r\nexport function toRefs(object) {\r\n    // object 可能传递的是一个数组或者对象\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (let key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}","import { isFunction } from \"@vue/shared\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\n\r\nclass ComputedRefImpl {\r\n    public _dirty = true; // 默认取值时不要用缓存\r\n    public _value;\r\n    public effect;\r\n    constructor(public getter, public setter) { // ts 中 传进来的参数不会挂载到this上 要加上public;\r\n        this.effect = effect(getter, {\r\n            lazy: true, // 默认不执行\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(this,TriggerOrTypes.SET,'value')\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    get value() { // 计算属性也要收集依赖\r\n\r\n        if (this._dirty) {\r\n            this._value = this.effect(); // 会将用户的返回值返回\r\n            this._dirty = false;\r\n        }\r\n        track(this,TrackOpType.GET,'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        this.setter(newValue);\r\n    }\r\n}\r\n\r\n\r\n// vue2 和 vue3 computed 原理是不一样的\r\nexport function computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n\r\n    // 先判断传递的参数是不是一个函数\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = () => {\r\n            console.warn('computed value must be readonly');\r\n\r\n        }\r\n    } else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter)\r\n}"],"names":[],"mappings":"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"}