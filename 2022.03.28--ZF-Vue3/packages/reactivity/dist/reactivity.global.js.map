{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/effect.ts","../src/baseHandlers.ts","../src/reactive.ts","../src/ref.ts","../src/computed.ts"],"sourcesContent":["export const isObject = (obj) => typeof obj === 'object' && typeof obj !== null;\r\nexport const extend = Object.assign;\r\nexport const isArray = Array.isArray;\r\nexport const isFunction = (value) => typeof value == 'function';\r\nexport const isNumber = (value) => typeof value == 'number';\r\nexport const isString = (value) => typeof value == 'string';\r\nexport const isIntegerKey = (key) => parseInt(key) + '' === key;\r\n\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport const hasOwn = (target, key) => hasOwnProperty.call(target, key);\r\n\r\nexport const hasChanged = (oldValue, value) => oldValue !== value; ","import { isArray, isIntegerKey } from \"@vue/shared\";\r\nimport { TriggerOrTypes } from \"./operators\";\r\n\r\nexport function effect(fn, options: any = {}) {\r\n    // 我需要让这个effect 变成响应的 efect 可以做到数据变化重新执行\r\n    const effect = createReactiveEffect(fn, options);\r\n\r\n    if (!options.lazy) { // 默认的effect 会先执行\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\n\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前的 effect\r\nconst effectStack = []; // 不能存放重复的 effect\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effectStack.includes(effect)) { // 保证effect 没有加入到effectStack中\r\n            try {\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return  fn(); // 函数执行时会取值  会执行get方法\r\n            } finally {\r\n                effectStack.pop();\r\n                activeEffect = effectStack[effectStack.length - 1]\r\n            }\r\n        }\r\n\r\n    }\r\n    effect.id = uid++; // 制作一个effect标识 用于区分effect\r\n    effect._isEffect = true; // 用于标识这个响应式effect\r\n    effect.raw = fn; // 保留effect对应的原函数\r\n    effect.options = options; // 在effect保留用户的属性\r\n    return effect;\r\n}\r\n\r\n// 让某个对象中的属性 收集当前他对应的 effect 函数\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n    // activeEffect; 当前正在运行的 effect\r\n    if (activeEffect === undefined) { // 此属性不用依赖收集 因为没在effect 中使用\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, depsMap = new Map);\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set))\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect)\r\n    }\r\n    // console.log(targetMap);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// activeEffect 依赖收集就是收集effect -->  属性对应  effect 要存放的数据结构\r\n// wekMap 存放对象属性 target => new Map \r\n// new Map 结构是=> key => Set\r\n\r\n\r\n\r\n// effect(()=> {\r\n//     state.age++; // 要防止这种造成死循环\r\n// })\r\n\r\n// 函数调用是一个栈结构\r\n//  effect(()=>{ // effect1\r\n//     state.name --> effect1\r\n//     effect(()=>{//effect2\r\n//         state.age --> effect2\r\n//     })\r\n//     state.address --> effect1\r\n// })\r\n\r\n\r\n\r\n// 找属性对应的effect 让其执行(这里值考虑了数组和对象)\r\nexport function trigger(target, type, key?, newValue?, oldValue?) {\r\n    // 如果这个属性没有 收集过effect 那不需要任何操作\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) return;\r\n    const effects = new Set(); // 这里对effect 去重了\r\n    const add = (effectToAdd) => {\r\n        if (effectToAdd) {\r\n            effectToAdd.forEach(effect => effects.add(effect))\r\n        }\r\n    }\r\n    // 要将所有的 要执行的effect 全部存到一个新的集合中 最终一起执行\r\n\r\n    // 1.看修改的是不是数组的长度 因为改长度影响比较大\r\n    if (key === 'length' && isArray(target)) {\r\n        // 如果对应的长度 有依赖收集需要更新\r\n        depsMap.forEach((dep, index) => {\r\n            if (key === 'length' || key > newValue) {// 如果更改的长度小于收集的索引 那么这个索引也需要触发effect重新执行\r\n                add(dep);\r\n            }\r\n        })\r\n    } else {\r\n        // 可能是对象\r\n        if (key !== undefined) { // 这里肯定是修改 不能是新增\r\n            add(depsMap.get(key));\r\n        }\r\n        // 如果修改了数组中的 某一个索引 怎么办?\r\n        switch (type) {\r\n            case TriggerOrTypes.ADD:\r\n                if (isArray(target) && isIntegerKey(key)) {\r\n                    add(depsMap.get('length'));\r\n                }\r\n        }\r\n    }\r\n\r\n    // console.log('effects', effects);\r\n\r\n    // effects.forEach((effect: any) => effect());\r\n    effects.forEach((effect: any) => {\r\n        if(effect.options.scheduler){\r\n            effect.options.scheduler(effect);\r\n        }else {\r\n            effect();\r\n        }\r\n    });\r\n}","// 实现 new Proxy(target,handler)\r\n\r\nimport { extend, hasChanged, hasOwn, isArray, isIntegerKey, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\nimport { readonly, reactive } from './reactive'\r\n\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\n\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\n\r\nexport const mutableHandlers = {\r\n    get,\r\n    set,\r\n};\r\nexport const shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n    set: shallowSet,\r\n};\r\n\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key ${key}  falied`);\r\n\r\n    }\r\n}\r\n\r\nexport const readonlyHandlers = extend({\r\n    get: readonlyGet\r\n}, readonlyObj);\r\nexport const shallowReadonlyHandlers = extend({\r\n    get: shallowReadonlyGet\r\n}, readonlyObj);\r\n\r\n\r\n// 是不是仅读的 仅读的属性set 时会报异常\r\n// 是不是深度的\r\nfunction createGetter(isReadonly = false, shallow = false) {  // 拦截获取功能\r\n\r\n    return function get(target, key, receiver) {\r\n        // proxy + Reflect\r\n\r\n        // 后续Object 上的方法会迁移到 Reflect \r\n        // 以前的 target[key] = value 方式设置值 可能会失败 并不会报异常 也没有返回值标识\r\n        // Reflect 方法具备返回值\r\n\r\n\r\n        const res = Reflect.get(target, key, receiver);\r\n\r\n        if (!isReadonly) {\r\n            // 收集依赖 等会数据变化后更新对应的视图\r\n            console.log('执行effect时会取值', '收集effect');\r\n            track(target, TrackOpType.GET, key)\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n\r\n        }\r\n        if (isObject(res)) {\r\n            // vue2 是一上来就递归  vue3 是当取值的时候递归 vue3的代理模式是懒递归\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res\r\n    }\r\n\r\n\r\n\r\n}\r\nfunction createSetter(isReadonly = false) { // 拦截设置功能\r\n    return function set(target, key, value, receiver) {\r\n\r\n        const oldValue = target[key]; // 获取老的值\r\n        // isArray(target) && isIntegerKey(key) 判断是数组 并且改了下标的值 \r\n        // 然后判断 修改的下标的值比 数据的长度小 那么就是修改\r\n        // 最后 判断新老值是否相等 是相等就是修改\r\n        let hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\r\n\r\n        const result = Reflect.set(target, key, value, receiver); // target[key] = value\r\n\r\n        if (!hadKey) {\r\n            // 新增\r\n            trigger(target, TriggerOrTypes.ADD, key, value);\r\n            // console.log('新增');\r\n\r\n        } else if (hasChanged(oldValue, value)) {\r\n            // 修改\r\n            trigger(target, TriggerOrTypes.SET, key, value, oldValue);\r\n            // console.log('修改');\r\n\r\n        }\r\n\r\n        // 我们要区分是新增的 还是修改的 vue2 里无法监控更改索引 无法监控数组的长度的变化\r\n\r\n        // 当数据更新时  通知对应属性的effect 重新执行\r\n\r\n        return result;\r\n    }\r\n}","import { isObject } from \"@vue/shared\";\r\nimport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers } from './baseHandlers'\r\n\r\n\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers)\r\n}\r\n\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers)\r\n}\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers)\r\n}\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers)\r\n}\r\n\r\n\r\nconst reactiveMap = new WeakMap(); // 会自动的垃圾回收 不会造成内存泄漏 存储的key 只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\r\n    // 如果目标不是对象,就没法拦截, reactive 这个api 只能拦截对象\r\n    if (!isObject(target)) {\r\n        return target;\r\n    }\r\n    // 如果某个对象已经被代理过了 就不要再次代理了 可能一个对象 被代理是深度  又被仅读代理了\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const existProxy = proxyMap.get(target);\r\n    if (existProxy) {\r\n        return existProxy; // 如果已经被代理了 直接返回即可\r\n    }\r\n\r\n    const proxy = new Proxy(target, baseHandlers);\r\n    proxyMap.set(target, proxy);// 将要代理的对象和对应代理的结果缓存起来 \r\n\r\n    return proxy;\r\n}","import { hasChanged, isArray, isObject } from \"@vue/shared\";\r\nimport { track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\nimport { reactive } from \"./reactive\";\r\n\r\nexport function ref(value) {\r\n    // 将一个普通类型 变成一个对象,  可以是对象 但是一般情况下是对象直接用reactive 更合理\r\n    return createRef(value);\r\n}\r\n\r\n// ref 和 reactive 的区别  reactive内部采用proxy ref中内部使用的是 defineProperty\r\n\r\nexport function shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\n\r\n// 后续看vue的源码基本上使用的都是高阶函数 做了类似柯里化的功能;\r\n\r\nconst convert = (val) => isObject(val) ? reactive(val) : val;\r\nclass RefImpl {\r\n    public _value; // 标识声明了一个_value 属性 但是没有赋值\r\n    public __v_isRef = true; // 产生的实例会被添加 __v_isRef 表示是一个ref属性\r\n    constructor(public rawValue, public shallow) { // 参数中前面增加修饰符 标识此属性放到了实例上\r\n        this._value = shallow ? rawValue : convert(rawValue); // 如果是深度的 需要把里面的都变成响应式的 直接使用 reactive\r\n    }\r\n    // 类的属性访问器\r\n    get value() {\r\n        // 收集依赖 收集effect \r\n        track(this, TrackOpType.GET, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        if (hasChanged(newValue, this.rawValue)) { // 判断老值和新值是否有变化\r\n            this.rawValue = newValue;\r\n            this._value = this.shallow ? newValue : convert(newValue);\r\n            trigger(this, TriggerOrTypes.SET, 'value', newValue);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction createRef(rawValue, shallow = false) {\r\n    return new RefImpl(rawValue, shallow)\r\n}\r\n\r\nclass ObjectRefImpl {\r\n    public __v_isRef = true;\r\n    constructor(public target, public key) {\r\n\r\n    }\r\n    get value() {\r\n        return this.target[this.key]\r\n    }\r\n    set value(newValue) {\r\n        this.target[this.key] = newValue;\r\n    }\r\n}\r\n\r\n\r\n// 可以讲一个对象的值转化成ref 类型\r\nexport function toRef(target, key) {\r\n    return new ObjectRefImpl(target, key);\r\n}\r\n\r\n// 包装整个对象\r\nexport function toRefs(object) {\r\n    // object 可能传递的是一个数组或者对象\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (let key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}","import { isFunction } from \"@vue/shared\";\r\nimport { effect, track, trigger } from \"./effect\";\r\nimport { TrackOpType, TriggerOrTypes } from \"./operators\";\r\n\r\nclass ComputedRefImpl {\r\n    public _dirty = true; // 默认取值时不要用缓存\r\n    public _value;\r\n    public effect;\r\n    constructor(public getter, public setter) { // ts 中 传进来的参数不会挂载到this上 要加上public;\r\n        this.effect = effect(getter, {\r\n            lazy: true, // 默认不执行\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(this,TriggerOrTypes.SET,'value')\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n    get value() { // 计算属性也要收集依赖\r\n\r\n        if (this._dirty) {\r\n            this._value = this.effect(); // 会将用户的返回值返回\r\n            this._dirty = false;\r\n        }\r\n        track(this,TrackOpType.GET,'value');\r\n        return this._value;\r\n    }\r\n    set value(newValue) {\r\n        this.setter(newValue);\r\n    }\r\n}\r\n\r\n\r\n// vue2 和 vue3 computed 原理是不一样的\r\nexport function computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n\r\n    // 先判断传递的参数是不是一个函数\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = () => {\r\n            console.warn('computed value must be readonly');\r\n\r\n        }\r\n    } else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter)\r\n}"],"names":[],"mappings":";;;IAAO,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,IAAI,CAAC;IACzE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IAC9B,MAAM,UAAU,GAAG,CAAC,KAAK,KAAK,OAAO,KAAK,IAAI,UAAU,CAAC;IAGzD,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC;IAEhE,IAAI,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;IAC9C,MAAM,MAAM,GAAG,CAAC,MAAM,EAAE,GAAG,KAAK,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAEjE,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,KAAK,KAAK,QAAQ,KAAK,KAAK;;aCRjD,MAAM,CAAC,EAAE,EAAE,UAAe,EAAE,EAAA;;QAExC,MAAM,MAAM,GAAG,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAEjD,IAAA,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;IACf,QAAA,MAAM,EAAE,CAAC;IACZ,KAAA;IACD,IAAA,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAI,YAAY,CAAC;IACjB,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,SAAS,oBAAoB,CAAC,EAAE,EAAE,OAAO,EAAA;QACrC,MAAM,MAAM,GAAG,SAAS,cAAc,GAAA;YAClC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC/B,IAAI;IACA,gBAAA,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzB,YAAY,GAAG,MAAM,CAAC;IACtB,gBAAA,OAAQ,EAAE,EAAE,CAAC;IAChB,aAAA;IAAS,oBAAA;oBACN,WAAW,CAAC,GAAG,EAAE,CAAC;oBAClB,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IACrD,aAAA;IACJ,SAAA;IAEL,KAAC,CAAA;IACD,IAAA,MAAM,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;IAClB,IAAA,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,IAAA,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;IAChB,IAAA,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,IAAA,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;IACA,MAAM,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;aAChB,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAA;;IAEnC,IAAA,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,OAAO;IACV,KAAA;QACD,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,EAAE;YACV,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;IAC5C,KAAA;QACD,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,GAAG,EAAE;IACN,QAAA,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,CAAA;IACpC,KAAA;IACD,IAAA,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;IACxB,QAAA,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IACxB,KAAA;;IAGL,CAAC;IAKD;IACA;IACA;IAIA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAIA;IACM,SAAU,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,GAAI,EAAE,QAAS,EAAE,QAAS,EAAA;;QAE5D,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtC,IAAA,IAAI,CAAC,OAAO;YAAE,OAAO;IACrB,IAAA,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC1B,IAAA,MAAM,GAAG,GAAG,CAAC,WAAW,KAAI;IACxB,QAAA,IAAI,WAAW,EAAE;IACb,YAAA,WAAW,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;IACrD,SAAA;IACL,KAAC,CAAA;;;QAID,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;;YAErC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;gBAC3B,IAAI,GAAG,KAAK,QAAQ,IAAI,GAAG,GAAG,QAAQ,EAAE;oBACpC,GAAG,CAAC,GAAG,CAAC,CAAC;IACZ,aAAA;IACL,SAAC,CAAC,CAAA;IACL,KAAA;IAAM,SAAA;;IAEH,QAAA,IAAI,GAAG,KAAK,SAAS,EAAE;gBACnB,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB,SAAA;;IAED,QAAA,QAAQ,IAAI;IACR,YAAA,KAAA,CAAA;oBACI,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE;wBACtC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC9B,iBAAA;IACR,SAAA;IACJ,KAAA;;;IAKD,IAAA,OAAO,CAAC,OAAO,CAAC,CAAC,MAAW,KAAI;IAC5B,QAAA,IAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAC;IACxB,YAAA,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACpC,SAAA;IAAK,aAAA;IACF,YAAA,MAAM,EAAE,CAAC;IACZ,SAAA;IACL,KAAC,CAAC,CAAC;IACP;;IChIA;IAOA,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;IAC3B,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,kBAAkB,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAEpD,MAAM,GAAG,GAAG,YAAY,EAAE,CAAC;IAC3B,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAE/B,MAAM,eAAe,GAAG;QAC3B,GAAG;QACH,GAAG;KACN,CAAC;IACK,MAAM,uBAAuB,GAAG;IACnC,IAAA,GAAG,EAAE,UAAU;IACf,IAAA,GAAG,EAAE,UAAU;KAClB,CAAC;IAEF,IAAI,WAAW,GAAG;IACd,IAAA,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,KAAI;IACjB,QAAA,OAAO,CAAC,IAAI,CAAC,cAAc,GAAG,CAAA,QAAA,CAAU,CAAC,CAAC;SAE7C;KACJ,CAAA;IAEM,MAAM,gBAAgB,GAAG,MAAM,CAAC;IACnC,IAAA,GAAG,EAAE,WAAW;KACnB,EAAE,WAAW,CAAC,CAAC;IACT,MAAM,uBAAuB,GAAG,MAAM,CAAC;IAC1C,IAAA,GAAG,EAAE,kBAAkB;KAC1B,EAAE,WAAW,CAAC,CAAC;IAGhB;IACA;IACA,SAAS,YAAY,CAAC,UAAU,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAA;IAErD,IAAA,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAA;;;;;IAQrC,QAAA,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE/C,IAAI,CAAC,UAAU,EAAE;;IAEb,YAAA,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;IACxC,YAAA,KAAK,CAAC,MAAM,EAAmB,CAAA,YAAA,GAAG,CAAC,CAAA;IACtC,SAAA;IACD,QAAA,IAAI,OAAO,EAAE;IACT,YAAA,OAAO,GAAG,CAAC;IAEd,SAAA;IACD,QAAA,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;;IAEf,YAAA,OAAO,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACrD,SAAA;IACD,QAAA,OAAO,GAAG,CAAA;IACd,KAAC,CAAA;IAIL,CAAC;IACD,SAAS,YAAY,CAAC,UAAU,GAAG,KAAK,EAAA;QACpC,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAA;YAE5C,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;;;IAI7B,QAAA,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAEtG,QAAA,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAEzD,IAAI,CAAC,MAAM,EAAE;;IAET,YAAA,OAAO,CAAC,MAAM,EAAA,CAAA,YAAsB,GAAG,EAAE,KAAK,CAAC,CAAC;;IAGnD,SAAA;IAAM,aAAA,IAAI,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;;gBAEpC,OAAO,CAAC,MAAM,EAAsB,CAAA,YAAA,GAAG,EAAE,KAAe,CAAC,CAAC;;IAG7D,SAAA;;;IAMD,QAAA,OAAO,MAAM,CAAC;IAClB,KAAC,CAAA;IACL;;ICjGM,SAAU,QAAQ,CAAC,MAAM,EAAA;QAC3B,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAA;IAC/D,CAAC;IAEK,SAAU,eAAe,CAAC,MAAM,EAAA;QAClC,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAA;IACvE,CAAC;IACK,SAAU,QAAQ,CAAC,MAAM,EAAA;QAC3B,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAA;IAC/D,CAAC;IACK,SAAU,eAAe,CAAC,MAAM,EAAA;QAClC,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,uBAAuB,CAAC,CAAA;IACtE,CAAC;IAGD,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;IAClC,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;aAClB,oBAAoB,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAA;;IAEjE,IAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IACnB,QAAA,OAAO,MAAM,CAAC;IACjB,KAAA;;QAED,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,GAAG,WAAW,CAAC;QACxD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACxC,IAAA,IAAI,UAAU,EAAE;YACZ,OAAO,UAAU,CAAC;IACrB,KAAA;QAED,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC9C,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAE5B,IAAA,OAAO,KAAK,CAAC;IACjB;;IChCM,SAAU,GAAG,CAAC,KAAK,EAAA;;IAErB,IAAA,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;IAEM,SAAU,UAAU,CAAC,KAAK,EAAA;IAC5B,IAAA,OAAO,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED;IAEA,MAAM,OAAO,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IAC7D,MAAM,OAAO,CAAA;IAGU,IAAA,QAAA,CAAA;IAAiB,IAAA,OAAA,CAAA;QAF7B,MAAM,CAAC;IACP,IAAA,SAAS,GAAG,IAAI,CAAC;QACxB,WAAmB,CAAA,QAAQ,EAAS,OAAO,EAAA;YAAxB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAA;YAAS,IAAO,CAAA,OAAA,GAAP,OAAO,CAAA;IACvC,QAAA,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;SACxD;;IAED,IAAA,IAAI,KAAK,GAAA;;IAEL,QAAA,KAAK,CAAC,IAAI,EAAmB,CAAA,YAAA,OAAO,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;QACD,IAAI,KAAK,CAAC,QAAQ,EAAA;YACd,IAAI,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;IACrC,YAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACzB,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC1D,YAAA,OAAO,CAAC,IAAI,EAAA,CAAA,YAAsB,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxD,SAAA;SACJ;IAEJ,CAAA;IAED,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO,GAAG,KAAK,EAAA;IACxC,IAAA,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;IACzC,CAAC;IAED,MAAM,aAAa,CAAA;IAEI,IAAA,MAAA,CAAA;IAAe,IAAA,GAAA,CAAA;QAD3B,SAAS,GAAG,IAAI,CAAC;QACxB,WAAmB,CAAA,MAAM,EAAS,GAAG,EAAA;YAAlB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAA;YAAS,IAAG,CAAA,GAAA,GAAH,GAAG,CAAA;SAEpC;IACD,IAAA,IAAI,KAAK,GAAA;YACL,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SAC/B;QACD,IAAI,KAAK,CAAC,QAAQ,EAAA;YACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;SACpC;IACJ,CAAA;IAGD;IACgB,SAAA,KAAK,CAAC,MAAM,EAAE,GAAG,EAAA;IAC7B,IAAA,OAAO,IAAI,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED;IACM,SAAU,MAAM,CAAC,MAAM,EAAA;;QAEzB,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC5D,IAAA,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;YACpB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACjC,KAAA;IACD,IAAA,OAAO,GAAG,CAAC;IACf;;ICpEA,MAAM,eAAe,CAAA;IAIE,IAAA,MAAA,CAAA;IAAe,IAAA,MAAA,CAAA;IAH3B,IAAA,MAAM,GAAG,IAAI,CAAC;IACd,IAAA,MAAM,CAAC;IACP,IAAA,MAAM,CAAC;QACd,WAAmB,CAAA,MAAM,EAAS,MAAM,EAAA;YAArB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAA;YAAS,IAAM,CAAA,MAAA,GAAN,MAAM,CAAA;IACpC,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE;IACzB,YAAA,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,MAAK;IACZ,gBAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;IACd,oBAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACnB,oBAAA,OAAO,CAAC,IAAI,EAAoB,CAAA,YAAA,OAAO,CAAC,CAAA;IAC3C,iBAAA;iBACJ;IACJ,SAAA,CAAC,CAAA;SAEL;IACD,IAAA,IAAI,KAAK,GAAA;YAEL,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,YAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACvB,SAAA;IACD,QAAA,KAAK,CAAC,IAAI,EAAiB,CAAA,YAAA,OAAO,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;QACD,IAAI,KAAK,CAAC,QAAQ,EAAA;IACd,QAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACzB;IACJ,CAAA;IAGD;IACM,SAAU,QAAQ,CAAC,eAAe,EAAA;IACpC,IAAA,IAAI,MAAM,CAAC;IACX,IAAA,IAAI,MAAM,CAAC;;IAGX,IAAA,IAAI,UAAU,CAAC,eAAe,CAAC,EAAE;YAC7B,MAAM,GAAG,eAAe,CAAC;YACzB,MAAM,GAAG,MAAK;IACV,YAAA,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAEpD,SAAC,CAAA;IACJ,KAAA;IAAM,SAAA;IACH,QAAA,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC;IAC7B,QAAA,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC;IAChC,KAAA;IACD,IAAA,OAAO,IAAI,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IAC9C;;;;;;;;;;;;;;;;;;;;;"}